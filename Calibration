import cv2
import numpy as np
import glob

# 체커보드 패턴 크기 (예: 9x6)
CHECKERBOARD = (9, 6)

# 3D 좌표 설정 (기준 좌표)
objp = np.zeros((CHECKERBOARD[0] * CHECKERBOARD[1], 3), np.float32)
objp[:, :2] = np.mgrid[0:CHECKERBOARD[0], 0:CHECKERBOARD[1]].T.reshape(-1, 2)

# 저장할 리스트
objpoints = []  # 실제 3D 좌표
imgpoints = []  # 2D 이미지 좌표

# 캘리브레이션할 이미지들 불러오기
images = glob.glob('*.jpg')  # 캘리브레이션 이미지 폴더

for fname in images:
    img = cv2.imread(fname)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # 체커보드 코너 찾기
    ret, corners = cv2.findChessboardCorners(gray, CHECKERBOARD, None)

    if ret:
        objpoints.append(objp)
        imgpoints.append(corners)

# 카메라 캘리브레이션 실행
ret, camera_matrix, dist_coeffs, rvecs, tvecs = cv2.calibrateCamera(objpoints, imgpoints, gray.shape[::-1], None, None)

# 결과 출력
print("Camera Matrix:\n", camera_matrix)
print("Distortion Coefficients:\n", dist_coeffs)

# 🔹 캘리브레이션 적용 후, 보정된 이미지 생성 (체커보드 선 표시 포함)
for idx, fname in enumerate(images):
    img = cv2.imread(fname)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    # 보정된 카메라 행렬 계산
    h, w = img.shape[:2]
    new_camera_matrix, roi = cv2.getOptimalNewCameraMatrix(camera_matrix, dist_coeffs, (w, h), 1, (w, h))

    # 🔹 왜곡 보정 적용
    undistorted_img = cv2.undistort(img, camera_matrix, dist_coeffs, None, new_camera_matrix)

    # 🔹 체커보드 코너 다시 찾기 (보정된 이미지에서)
    ret, corners = cv2.findChessboardCorners(cv2.cvtColor(undistorted_img, cv2.COLOR_BGR2GRAY), CHECKERBOARD, None)

    if ret:
        # 🔹 보정된 이미지에 체커보드 코너 선 그리기
        cv2.drawChessboardCorners(undistorted_img, CHECKERBOARD, corners, ret)

    # 결과 저장
    output_filename = f"undistorted_corners_{idx}.jpg"
    cv2.imwrite(output_filename, undistorted_img)
    print(f"📸 보정된 체커보드 이미지 저장: {output_filename}")

    # 보정된 이미지 시각화
    cv2.imshow('Undistorted Image with Chessboard', undistorted_img)
    cv2.waitKey(500)

cv2.destroyAllWindows()
